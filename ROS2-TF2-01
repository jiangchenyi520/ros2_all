{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyO6gAWZ3Y/tNUVbwDiI8wFp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"K6LNLCcJ-DYV"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["# Introducción"],"metadata":{"id":"DoNN0M45Mza1"}},{"cell_type":"markdown","source":["El paquete TF2 contiene varias herramientas para trabajar con las transformadas así como funciones para trabajar con quaterniones.\n","\n","Entre las herramientas para depurar problemas originados por la transformación de coordenadas tenemos algunas que ya hemos estudiado anteriormente como:\n","- Visualizador de frames: permite imprimir en formato pdf el árbol de tansformadas y visualizar su publicación\n","\n","\n","```\n","ros2 run tf2_tools view_frames\n","```\n","\n","\n","- Subscriptor al topic tf: podemos subsbcribirnos al topic tf para ver qué transformadas se están publicando. Para ello debermos utilizar el comando:\n","\n","\n","```\n","ros2 run tf2_ros tf2_echo [reference_frame] [target_frame]\n","```\n","\n","Por último también podemos utilizar el visualizador RVIZ2 añadiendo el topic TF para ver las transformadas que se están publicando.\n"],"metadata":{"id":"q3p0YK-VM3WF"}},{"cell_type":"markdown","source":["# Funciones para trabajar con quaterniones"],"metadata":{"id":"wZ2Y4tKqOOKQ"}},{"cell_type":"markdown","source":["Los quaterniones en ROS2 se presentan a través de cuatro componentes $(x, y, x, w)$ que equivalen a $(q_1, q_2, q_3, q_0)$ respectivamente. Siendo:\n","$$ w = q_0 = cos(θ) $$\n","$$ x = q_1 = u_x \\cdot sin(θ) $$\n","$$ y = q_2 =  u_y \\cdot sin(θ) $$\n","$$ z = q_3 =  u_z \\cdot sin(θ) $$"],"metadata":{"id":"xW-hEUpOOi4E"}},{"cell_type":"markdown","source":["El paquete tf2 posee algunas funciones útiles para trabajar con quaterniones, veamos algunas."],"metadata":{"id":"wNipWdMYPyZ9"}},{"cell_type":"markdown","source":["Para normalizar a 1 la magnitud de un quaternion se utiliza la función normalize:\n","\n","\n","```\n","q.normalize()\n","```\n","\n","Para convertir un quaternion en un mensaje tipo Quaternion utilizaremos el siguiente código:"],"metadata":{"id":"H2X-HFcfQgeB"}},{"cell_type":"code","source":["from geometry_msgs.msg import Quaternion\n","...\n","\n","# Create a list of floats, which is compatible with tf2\n","# Quaternion methods\n","quat_tf = [0.0, 1.0, 0.0, 0.0]\n","\n","# Convert a list to geometry_msgs.msg.Quaternion\n","msg_quat = Quaternion(x=quat_tf[0], y=quat_tf[1], z=quat_tf[2], w=quat_tf[3])"],"metadata":{"id":"WUEx2TnaQ3Fu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Si tenemos un vector en formato Euler y queremos convertirlo en un quaternión usaremos:"],"metadata":{"id":"GCJC1_jfQ77-"}},{"cell_type":"code","source":["import tf_transformations\n","...\n","\n","q = tf_transformations.quaternion_from_euler(1.5707, 0, -1.5707)\n","print(f'The quaternion representation is x: {q[0]} y: {q[1]} z: {q[2]} w: {q[3]}.')"],"metadata":{"id":"NAaE56PDRNjL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Para rotar un quaternion se utiiliza:"],"metadata":{"id":"XcXIuy2dRJ71"}},{"cell_type":"code","source":["import tf_transformations\n","...\n","\n","q_orig = tf_transformations.quaternion_from_euler(0, 0, 0)\n","# Rotate the previous pose by 180* about X\n","q_rot = tf_transformations.quaternion_from_euler(3.14159, 0, 0)\n","q_new = tf_transformations.quaternion_multiply(q_rot, q_orig)"],"metadata":{"id":"uonnpV-ZRYKt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"m9EHoOxDRsUC"}},{"cell_type":"markdown","source":["La inversión de un quaterión se realizará usando el signo -:\n","\n","\n","```\n","q[3] = -q[3]\n","```\n","\n"],"metadata":{"id":"f2wUukHPRXYM"}},{"cell_type":"markdown","source":["Para rotar un vector usaremos la multiplicación de quaterniones:"],"metadata":{"id":"IPKCL1eyRo37"}},{"cell_type":"code","source":["q_2= q_r * q_1"],"metadata":{"id":"jjlffqN4Rc9X"},"execution_count":null,"outputs":[]}]}